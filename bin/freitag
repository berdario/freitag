#!/usr/bin/env python
# encoding: utf-8
#
# FreiTAG - A simple command line tool to tag and rename mp3s.
# Copyright (c) 2010-2011 Giuseppe Capizzi
# mailto: g.capizzi@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
from sys import exit

from freitag import FreiSong, FreiTemplate, DEFAULT_FORMAT, TAGS
from freitag.operations import (RenameOperation, ExtractOperation,
                                HumanizeOperation)

from mutagen.mp3 import EasyMP3


def get_songs(files):
    return [FreiSong(EasyMP3(file)) for file in files]


def progress_bar(songs):
    try:
        from clint.textui import progress
    except ImportError:
        return songs
    else:
        return progress.bar(songs)


def get_songs_and_progress_bar(files):
    return progress_bar(get_songs(files))


def apply_operation_and_save(operation, files):
    songs = get_songs_and_progress_bar(files)
    for song in songs:
        operation.apply(song)
        song.save()


def get(args):
    """Print the songs informations according to the specified format."""
    songs = get_songs(args.files)
    template = FreiTemplate(args.format)
    for song in songs:
        print template.format(song)


def set(args):
    """Tag songs using arguments from argparse."""
    songs = get_songs_and_progress_bar(args.files)
    for song in songs:
        song.update(args.__dict__)
        song.save()


def rename(args):
    """Rename songs according to format."""
    rename_operation = RenameOperation(template=FreiTemplate(args.format))
    apply_operation_and_save(rename_operation, args.files)


def extract(args):
    """Tag songs extracting tag values from its filename according to format.

    """
    extract_operation = ExtractOperation(template=FreiTemplate(args.format))
    apply_operation_and_save(extract_operation, args.files)


def humanize(args):
    """Humanize album, artist and title tags in songs."""
    humanize_operation = HumanizeOperation()
    apply_operation_and_save(humanize_operation, args.files)


COMMANDS = {
        'get': get,
        'set': set,
        'rename': rename,
        'extract': extract,
        'humanize': humanize
        }


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('command', choices=COMMANDS.keys())
    parser.add_argument('files', nargs='+')
    parser.add_argument('--format', '-f', default=DEFAULT_FORMAT,
                        help='The format used by "get", "rename" and '
                        + '"extract" commands. You can use the following '
                        + 'placeholders: '
                        + ', '.join(['%%{0}'.format(t) for t in TAGS]))

    # tag setters
    for tag, props in TAGS.iteritems():
        long_opt = '--%s' % tag
        short_opt = '-%s' % props['abbr']
        parser.add_argument(long_opt, short_opt, help=props['help'])

    args = parser.parse_args()

    COMMANDS[args.command](args)


if __name__ == '__main__':
    exit(main())
